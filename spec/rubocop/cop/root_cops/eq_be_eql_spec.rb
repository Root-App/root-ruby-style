RSpec.describe RootCops::EqBeEql do
  OFFENDING_FORMS = [
    "expect(foo(bar)).to be(true)",
    "expect(foo(bar)).to be(false)",
    "expect(foo(bar)).to be(1)",
    "expect(foo(bar)).to be(1.1)",
    "expect(foo(bar)).to be(:symbol)",
    "expect(foo(bar)).to be(nil)",
    "expect(foo(bar)).to be(\"string\")",
    "expect(foo(bar)).to be true",
    "expect(foo(bar)).to be false",
    "expect(foo(bar)).to be 1",
    "expect(foo(bar)).to be 1.1",
    "expect(foo(bar)).to be :symbol",
    "expect(foo(bar)).to be nil",
    "expect(foo(bar)).to be \"string\"",
    "expect(foo(bar)).to be_true",
    "expect(foo(bar)).to be_false",
    "expect(foo(bar)).to be_nil",

    "expect(foo(bar)).not_to be(true)",
    "expect(foo(bar)).not_to be(false)",
    "expect(foo(bar)).not_to be(1)",
    "expect(foo(bar)).not_to be(1.1)",
    "expect(foo(bar)).not_to be(:symbol)",
    "expect(foo(bar)).not_to be(nil)",
    "expect(foo(bar)).not_to be(\"string\")",
    "expect(foo(bar)).not_to be true",
    "expect(foo(bar)).not_to be false",
    "expect(foo(bar)).not_to be 1",
    "expect(foo(bar)).not_to be 1.1",
    "expect(foo(bar)).not_to be :symbol",
    "expect(foo(bar)).not_to be nil",
    "expect(foo(bar)).not_to be \"string\"",
    "expect(foo(bar)).not_to be_true",
    "expect(foo(bar)).not_to be_false",
    "expect(foo(bar)).not_to be_nil",

    "expect(foo(bar)).to_not be(true)",
    "expect(foo(bar)).to_not be(false)",
    "expect(foo(bar)).to_not be(1)",
    "expect(foo(bar)).to_not be(1.1)",
    "expect(foo(bar)).to_not be(:symbol)",
    "expect(foo(bar)).to_not be(nil)",
    "expect(foo(bar)).to_not be(\"string\")",
    "expect(foo(bar)).to_not be true",
    "expect(foo(bar)).to_not be false",
    "expect(foo(bar)).to_not be 1",
    "expect(foo(bar)).to_not be 1.1",
    "expect(foo(bar)).to_not be :symbol",
    "expect(foo(bar)).to_not be nil",
    "expect(foo(bar)).to_not be \"string\"",
    "expect(foo(bar)).to_not be_true",
    "expect(foo(bar)).to_not be_false",
    "expect(foo(bar)).to_not be_nil",

    "expect(foo(bar)).to eql(true)",
    "expect(foo(bar)).to eql(false)",
    "expect(foo(bar)).to eql(1)",
    "expect(foo(bar)).to eql(1.1)",
    "expect(foo(bar)).to eql(:symbol)",
    "expect(foo(bar)).to eql(nil)",
    "expect(foo(bar)).to eql(\"string\")",
    "expect(foo(bar)).to eql true",
    "expect(foo(bar)).to eql false",
    "expect(foo(bar)).to eql 1",
    "expect(foo(bar)).to eql 1.1",
    "expect(foo(bar)).to eql :symbol",
    "expect(foo(bar)).to eql nil",
    "expect(foo(bar)).to eql \"string\"",

    "expect(foo(bar)).not_to eql(true)",
    "expect(foo(bar)).not_to eql(false)",
    "expect(foo(bar)).not_to eql(1)",
    "expect(foo(bar)).not_to eql(1.1)",
    "expect(foo(bar)).not_to eql(:symbol)",
    "expect(foo(bar)).not_to eql(nil)",
    "expect(foo(bar)).not_to eql(\"string\")",
    "expect(foo(bar)).not_to eql true",
    "expect(foo(bar)).not_to eql false",
    "expect(foo(bar)).not_to eql 1",
    "expect(foo(bar)).not_to eql 1.1",
    "expect(foo(bar)).not_to eql :symbol",
    "expect(foo(bar)).not_to eql nil",
    "expect(foo(bar)).not_to eql \"string\"",

    "expect(foo(bar)).to_not eql(true)",
    "expect(foo(bar)).to_not eql(false)",
    "expect(foo(bar)).to_not eql(1)",
    "expect(foo(bar)).to_not eql(1.1)",
    "expect(foo(bar)).to_not eql(:symbol)",
    "expect(foo(bar)).to_not eql(nil)",
    "expect(foo(bar)).to_not eql(\"string\")",
    "expect(foo(bar)).to_not eql true",
    "expect(foo(bar)).to_not eql false",
    "expect(foo(bar)).to_not eql 1",
    "expect(foo(bar)).to_not eql 1.1",
    "expect(foo(bar)).to_not eql :symbol",
    "expect(foo(bar)).to_not eql nil",
    "expect(foo(bar)).to_not eql \"string\""
  ].freeze

  OFFENDING_BLOCK_FORMS = [
    "it { expect(foo(bar)).to be(true) }",
    "it { expect(foo(bar)).to be(false) }",
    "it { expect(foo(bar)).to be(1) }",
    "it { expect(foo(bar)).to be(1.1) }",
    "it { expect(foo(bar)).to be(:symbol) }",
    "it { expect(foo(bar)).to be(nil) }",
    "it { expect(foo(bar)).to be(\"string\") }",
    "it { expect(foo(bar)).to be true }",
    "it { expect(foo(bar)).to be false }",
    "it { expect(foo(bar)).to be 1 }",
    "it { expect(foo(bar)).to be 1.1 }",
    "it { expect(foo(bar)).to be :symbol }",
    "it { expect(foo(bar)).to be nil }",
    "it { expect(foo(bar)).to be \"string\" }",
    "it { expect(foo(bar)).to be_true }",
    "it { expect(foo(bar)).to be_false }",
    "it { expect(foo(bar)).to be_nil }",

    "it { expect(foo(bar)).to_not be(true) }",
    "it { expect(foo(bar)).to_not be(false) }",
    "it { expect(foo(bar)).to_not be(1) }",
    "it { expect(foo(bar)).to_not be(1.1) }",
    "it { expect(foo(bar)).to_not be(:symbol) }",
    "it { expect(foo(bar)).to_not be(nil) }",
    "it { expect(foo(bar)).to_not be(\"string\") }",
    "it { expect(foo(bar)).to_not be true }",
    "it { expect(foo(bar)).to_not be false }",
    "it { expect(foo(bar)).to_not be 1 }",
    "it { expect(foo(bar)).to_not be 1.1 }",
    "it { expect(foo(bar)).to_not be :symbol }",
    "it { expect(foo(bar)).to_not be nil }",
    "it { expect(foo(bar)).to_not be \"string\" }",
    "it { expect(foo(bar)).to_not be_true }",
    "it { expect(foo(bar)).to_not be_false }",
    "it { expect(foo(bar)).to_not be_nil }",

    "it { expect(foo(bar)).not_to be(true) }",
    "it { expect(foo(bar)).not_to be(false) }",
    "it { expect(foo(bar)).not_to be(1) }",
    "it { expect(foo(bar)).not_to be(1.1) }",
    "it { expect(foo(bar)).not_to be(:symbol) }",
    "it { expect(foo(bar)).not_to be(nil) }",
    "it { expect(foo(bar)).not_to be(\"string\") }",
    "it { expect(foo(bar)).not_to be true }",
    "it { expect(foo(bar)).not_to be false }",
    "it { expect(foo(bar)).not_to be 1 }",
    "it { expect(foo(bar)).not_to be 1.1 }",
    "it { expect(foo(bar)).not_to be :symbol }",
    "it { expect(foo(bar)).not_to be nil }",
    "it { expect(foo(bar)).not_to be \"string\" }",
    "it { expect(foo(bar)).not_to be_true }",
    "it { expect(foo(bar)).not_to be_false }",
    "it { expect(foo(bar)).not_to be_nil }",

    "it { expect(foo(bar)).to eql(true) }",
    "it { expect(foo(bar)).to eql(false) }",
    "it { expect(foo(bar)).to eql(1) }",
    "it { expect(foo(bar)).to eql(1.1) }",
    "it { expect(foo(bar)).to eql(:symbol) }",
    "it { expect(foo(bar)).to eql(nil) }",
    "it { expect(foo(bar)).to eql(\"string\") }",
    "it { expect(foo(bar)).to eql true }",
    "it { expect(foo(bar)).to eql false }",
    "it { expect(foo(bar)).to eql 1 }",
    "it { expect(foo(bar)).to eql 1.1 }",
    "it { expect(foo(bar)).to eql :symbol }",
    "it { expect(foo(bar)).to eql nil }",
    "it { expect(foo(bar)).to eql \"string\" }",

    "it { expect(foo(bar)).to_not eql(true) }",
    "it { expect(foo(bar)).to_not eql(false) }",
    "it { expect(foo(bar)).to_not eql(1) }",
    "it { expect(foo(bar)).to_not eql(1.1) }",
    "it { expect(foo(bar)).to_not eql(:symbol) }",
    "it { expect(foo(bar)).to_not eql(nil) }",
    "it { expect(foo(bar)).to_not eql(\"string\") }",
    "it { expect(foo(bar)).to_not eql true }",
    "it { expect(foo(bar)).to_not eql false }",
    "it { expect(foo(bar)).to_not eql 1 }",
    "it { expect(foo(bar)).to_not eql 1.1 }",
    "it { expect(foo(bar)).to_not eql :symbol }",
    "it { expect(foo(bar)).to_not eql nil }",
    "it { expect(foo(bar)).to_not eql \"string\" }",

    "it { expect(foo(bar)).not_to eql(true) }",
    "it { expect(foo(bar)).not_to eql(false) }",
    "it { expect(foo(bar)).not_to eql(1) }",
    "it { expect(foo(bar)).not_to eql(1.1) }",
    "it { expect(foo(bar)).not_to eql(:symbol) }",
    "it { expect(foo(bar)).not_to eql(nil) }",
    "it { expect(foo(bar)).not_to eql(\"string\") }",
    "it { expect(foo(bar)).not_to eql true }",
    "it { expect(foo(bar)).not_to eql false }",
    "it { expect(foo(bar)).not_to eql 1 }",
    "it { expect(foo(bar)).not_to eql 1.1 }",
    "it { expect(foo(bar)).not_to eql :symbol }",
    "it { expect(foo(bar)).not_to eql nil }",
    "it { expect(foo(bar)).not_to eql \"string\" }"
  ].freeze

  VALID_FORMS = [
    "expect(foo(bar)).to eq(true)",
    "expect(foo(bar)).to eq(false)",
    "expect(foo(bar)).to eq(1)",
    "expect(foo(bar)).to eq(1.1)",
    "expect(foo(bar)).to eq(:symbol)",
    "expect(foo(bar)).to eq(nil)",
    "expect(foo(bar)).to eq(\"string\")",
    "it { expect(foo(bar)).to eq(true) }",
    "it { expect(foo(bar)).to eq(false) }",
    "it { expect(foo(bar)).to eq(1) }",
    "it { expect(foo(bar)).to eq(1.1) }",
    "it { expect(foo(bar)).to eq(:symbol) }",
    "it { expect(foo(bar)).to eq(nil) }",
    "it { expect(foo(bar)).to eq(\"string\") }",

    "expect(foo(bar)).to_not eq(true)",
    "expect(foo(bar)).to_not eq(false)",
    "expect(foo(bar)).to_not eq(1)",
    "expect(foo(bar)).to_not eq(1.1)",
    "expect(foo(bar)).to_not eq(:symbol)",
    "expect(foo(bar)).to_not eq(nil)",
    "expect(foo(bar)).to_not eq(\"string\")",
    "it { expect(foo(bar)).to_not eq(true) }",
    "it { expect(foo(bar)).to_not eq(false) }",
    "it { expect(foo(bar)).to_not eq(1) }",
    "it { expect(foo(bar)).to_not eq(1.1) }",
    "it { expect(foo(bar)).to_not eq(:symbol) }",
    "it { expect(foo(bar)).to_not eq(nil) }",
    "it { expect(foo(bar)).to_not eq(\"string\") }",

    "expect(foo(bar)).not_to eq(true)",
    "expect(foo(bar)).not_to eq(false)",
    "expect(foo(bar)).not_to eq(1)",
    "expect(foo(bar)).not_to eq(1.1)",
    "expect(foo(bar)).not_to eq(:symbol)",
    "expect(foo(bar)).not_to eq(nil)",
    "expect(foo(bar)).not_to eq(\"string\")",
    "it { expect(foo(bar)).not_to eq(true) }",
    "it { expect(foo(bar)).not_to eq(false) }",
    "it { expect(foo(bar)).not_to eq(1) }",
    "it { expect(foo(bar)).not_to eq(1.1) }",
    "it { expect(foo(bar)).not_to eq(:symbol) }",
    "it { expect(foo(bar)).not_to eq(nil) }",
    "it { expect(foo(bar)).not_to eq(\"string\") }"
  ].freeze

  subject(:cop) { described_class.new }

  OFFENDING_FORMS.each do |offending_form|
    it_behaves_like "registers an offense", offending_form, "RootCops/EqBeEql: #{described_class::MSG}"
  end

  OFFENDING_BLOCK_FORMS.each do |offending_form|
    it_behaves_like "registers an offense", offending_form, "RootCops/EqBeEql: #{described_class::MSG}"
  end

  VALID_FORMS.each do |valid_form|
    it_behaves_like "does not register an offense", valid_form
  end
end
